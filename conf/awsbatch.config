/*
================================================================================
    AWS BATCH CONFIGURATION
================================================================================
    AWS Batch execution environment configuration
--------------------------------------------------------------------------------
*/

// AWS Batch execution
process {
    executor = 'awsbatch'
    queue = params.awsqueue
}

// AWS region
aws {
    region = params.awsregion
    client {
        maxConnections = 2
        connectionTimeout = 10000
        maxErrorRetry = 3
    }
    batch {
        cliPath = params.awscli
        volumes = '/tmp'
        maxParallelTransfers = 24
        maxTransferAttempts = 3
        jobRole = params.awsbatch_jobrole ?: null
        
        // Enhanced retry strategy for spot interruptions
        retryMode = 'built-in'
        maxSpotAttempts = 3
    }
}

// Increase time limits for AWS
params {
    max_cpus   = 96
    max_memory = '768.GB'
    max_time   = '168.h'
}

// Process-specific AWS optimizations
process {
    
    // Use Spot instances for cost savings where appropriate
    withLabel:process_low {
        queue = { params.awsqueue_spot ?: params.awsqueue }
    }
    
    withLabel:process_medium {
        queue = { params.awsqueue_spot ?: params.awsqueue }
    }
    
    // Use on-demand for critical high-memory processes
    withLabel:process_high_memory {
        queue = params.awsqueue
    }
    
    // Retry strategy for spot interruptions
    errorStrategy = { task.exitStatus in [143,137,104,134,139,140] ? 'retry' : 'finish' }
    maxRetries = 3
    
    // S3 staging optimizations
    withName:'BWA_INDEX|STAR_GENOMEGENERATE' {
        scratch = false  // Keep reference indices
        stageInMode = 'link'
        stageOutMode = 'copy'
    }
    
    // Enable fusion for S3
    withName:'*' {
        scratch = true
        beforeScript = '''
            # Mount instance storage if available
            if [[ -d /mnt ]]; then
                export TMPDIR=/mnt/tmp
                mkdir -p $TMPDIR
            fi
        '''
    }
}

// Enable Wave for efficient container provisioning
wave {
    enabled = true
    strategy = 'container'
}

// Enable Fusion for optimized S3 file transfers
fusion {
    enabled = true
    exportStorageCredentials = true
}

// Execution reports in S3
def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}

report {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}

trace {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
    fields = 'task_id,hash,native_id,process,tag,status,exit,start,duration,realtime,cpus,memory,disk,attempt'
}

dag {
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

// CloudWatch logging
cloudwatch {
    enabled = true
    region = params.awsregion
    logGroup = "/aws/batch/nextflow"
    streamPrefix = "somatic-cnv-pipeline"
}

// Cost tracking tags
aws.batch.jobDefinition {
    parameters {
        'ResourceTags' {
            Project = "SomaticCNV"
            Pipeline = "somatic-cnv-pipeline"
            Version = "1.0.0"
        }
    }
}

/*
 * Base config for process resources
 * 
 * These are conservative defaults - adjust based on your system
 */

process {
    
    // defaults - probably too low for real data
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }
    
    // error codes from various cluster failures I've seen
    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'  // unlimited errors - maybe not smart?
    
    // Process-specific resource requirements
    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
    
    // Software containers
    withName:FASTQC {
        container = 'biocontainers/fastqc:0.12.1--hdfd78af_0'
        cpus      = { check_max( 6 * task.attempt, 'cpus' ) }
        memory    = { check_max( 36.GB * task.attempt, 'memory' ) }
    }
    
    withName:MULTIQC {
        container = 'biocontainers/multiqc:1.19--pyhdfd78af_0'
        cpus      = { check_max( 4 * task.attempt, 'cpus' ) }
        memory    = { check_max( 12.GB * task.attempt, 'memory' ) }
    }
    
    // Alignment tools
    withName:BWA_INDEX {
        container = 'biocontainers/bwa:0.7.17--h7132678_9'
        cpus      = { check_max( 1 * task.attempt, 'cpus' ) }
        memory    = { check_max( 30.GB * task.attempt, 'memory' ) }
        time      = { check_max( 4.h * task.attempt, 'time' ) }
    }
    
    withName:BWA_MEM {
        container = 'biocontainers/mulled-v2-8a259a362d5aa3b9e607b7a5c2cb2d4d61434e0f:b8d7a0db84d983cb01179c10d7e757cdcc388e42-0'  // bwa + samtools
        cpus      = { check_max( 12 * task.attempt, 'cpus' ) }
        memory    = { check_max( 30.GB * task.attempt, 'memory' ) }
        time      = { check_max( 8.h * task.attempt, 'time' ) }
    }
    
    withName:MINIMAP2_ALIGN {
        container = 'biocontainers/minimap2:2.26--he4a0461_2'
        cpus      = { check_max( 12 * task.attempt, 'cpus' ) }
        memory    = { check_max( 30.GB * task.attempt, 'memory' ) }
        time      = { check_max( 8.h * task.attempt, 'time' ) }
    }
    
    withName:PBMM2_ALIGN {
        container = 'biocontainers/pbmm2:1.13.1--h9ee0642_0'
        cpus      = { check_max( 12 * task.attempt, 'cpus' ) }
        memory    = { check_max( 30.GB * task.attempt, 'memory' ) }
        time      = { check_max( 8.h * task.attempt, 'time' ) }
    }
    
    withName:STAR_ALIGN {
        container = 'nfcore/rnaseq:3.12.0'
        cpus      = { check_max( 12 * task.attempt, 'cpus' ) }
        memory    = { check_max( 40.GB * task.attempt, 'memory' ) }
        time      = { check_max( 8.h * task.attempt, 'time' ) }
    }
    
    // GATK processes
    withName:'GATK4_.*' {
        container = 'broadinstitute/gatk:4.5.0.0'
        cpus      = { check_max( 4 * task.attempt, 'cpus' ) }
        memory    = { check_max( 12.GB * task.attempt, 'memory' ) }
        time      = { check_max( 8.h * task.attempt, 'time' ) }
    }
    
    withName:GATK4_MARKDUPLICATES {
        cpus      = { check_max( 6 * task.attempt, 'cpus' ) }
        memory    = { check_max( 30.GB * task.attempt, 'memory' ) }
    }
    
    // CNV tools
    withName:CNVKIT_BATCH {
        container = 'etal/cnvkit:0.9.10'
        cpus      = { check_max( 8 * task.attempt, 'cpus' ) }
        memory    = { check_max( 32.GB * task.attempt, 'memory' ) }
        time      = { check_max( 12.h * task.attempt, 'time' ) }
    }
    
    withName:SEVERUS {
        container = 'biocontainers/severus:1.0--py310h96ed5a5_2'
        cpus      = { check_max( 8 * task.attempt, 'cpus' ) }
        memory    = { check_max( 32.GB * task.attempt, 'memory' ) }
        time      = { check_max( 12.h * task.attempt, 'time' ) }
    }
    
    withName:GATK4_COLLECTREADCOUNTS {
        cpus      = { check_max( 1 * task.attempt, 'cpus' ) }
        memory    = { check_max( 12.GB * task.attempt, 'memory' ) }
    }
    
    withName:GATK4_DENOISECOUNTS {
        cpus      = { check_max( 1 * task.attempt, 'cpus' ) }
        memory    = { check_max( 24.GB * task.attempt, 'memory' ) }
    }
    
    withName:GATK4_MODELSEGMENTS {
        cpus      = { check_max( 1 * task.attempt, 'cpus' ) }
        memory    = { check_max( 12.GB * task.attempt, 'memory' ) }
    }
    
    // RNA quantification
    withName:SALMON_QUANT {
        container = 'biocontainers/salmon:1.10.2--h7e5ed60_0'
        cpus      = { check_max( 8 * task.attempt, 'cpus' ) }
        memory    = { check_max( 24.GB * task.attempt, 'memory' ) }
        time      = { check_max( 6.h * task.attempt, 'time' ) }
    }
    
    withName:STRINGTIE {
        container = 'biocontainers/stringtie:2.2.1--h7132678_4'
        cpus      = { check_max( 8 * task.attempt, 'cpus' ) }
        memory    = { check_max( 24.GB * task.attempt, 'memory' ) }
        time      = { check_max( 6.h * task.attempt, 'time' ) }
    }
    
    // CaSpER R process
    withName:CASPER_CNV {
        container = 'fourpartswater/casper-cnv:1.0'  // Custom container with R + CaSpER
        cpus      = { check_max( 8 * task.attempt, 'cpus' ) }
        memory    = { check_max( 64.GB * task.attempt, 'memory' ) }
        time      = { check_max( 24.h * task.attempt, 'time' ) }
    }
    
    // samtools processes
    withName:'SAMTOOLS_.*' {
        container = 'biocontainers/samtools:1.18--h50ea8bc_1'
        cpus      = { check_max( 4 * task.attempt, 'cpus' ) }
        memory    = { check_max( 12.GB * task.attempt, 'memory' ) }
    }
    
}

// Export to cluster environments
env {
    TMPDIR = "."
    TMP = "."
}

/*
 * Pipeline config
 * 
 * Defaults should work for most cases but YMMV
 */

// Global params
params {
    
    // Input/output options
    input                      = null
    outdir                     = './results'
    tracedir                   = "${params.outdir}/pipeline_info"
    publish_dir_mode           = 'copy'
    
    // Reference genome options
    genome                     = null
    igenomes_base             = 's3://ngi-igenomes/igenomes'
    igenomes_ignore           = false
    reference                 = null
    gtf                       = null
    
    // Variant calling options
    intervals                 = null
    pon                      = null  // Panel of normals
    germline_resource        = null
    known_sites              = null
    
    // Platform-specific options
    vntr_bed                 = null  // For Severus - it's picky about this file
    
    // Tool-specific options
    cnvkit_reference         = null
    cnvkit_scatter           = true  // makes nice plots
    gatk_cnv_pon            = null   // speeds things up if you have one
    
    // Hack zone - uncomment if desperate
    // emergency_mode          = false  // skips all validation
    // yolo_mode              = false  // runs everything with 1 retry
    // coffee_break           = 0      // pause between samples (seconds)
    
    // Resource allocation
    max_cpus                 = 16
    max_memory               = '128.GB'
    max_time                 = '240.h'
    
    // AWS batch options
    awsqueue                 = null
    awsregion                = 'us-east-1'
    awscli                   = '/usr/local/aws-cli/bin/aws'
    
    // Boilerplate options
    multiqc_config           = null
    multiqc_title            = null
    multiqc_logo             = null
    max_multiqc_email_size   = '25.MB'
    multiqc_methods_description = null
    
    // Generic options
    help                     = false
    version                  = false
    validate_params          = true
    show_hidden_params       = false
    schema_ignore_params     = 'genomes'
    
    // Config options
    custom_config_version    = 'master'
    custom_config_base       = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact   = null
    config_profile_url       = null
    config_profile_name      = null
    
    // Validation options
    validationFailUnrecognisedParams = false
    validationLenientMode    = false
    validationShowHiddenParams = false
    validate_params          = true
    
    // Email notifications
    email                    = null
    email_on_fail            = null
    plaintext_email          = false
    
    // Pipeline monitoring
    hook_url                 = null
    
    // Process skipping options
    skip_fastqc              = false
    skip_multiqc             = false
    skip_markduplicates      = false
    
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/configs profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load pipeline-specific custom profiles
profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    mamba {
        params.enable_conda    = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
    awsbatch  { includeConfig 'conf/awsbatch.config'  }
    gcpbatch  { includeConfig 'conf/gcpbatch.config'  }
}

// AWS Batch specific resource allocation
aws {
    batch {
        cliPath = params.awscli
        maxParallelTransfers = 24
        maxTransferAttempts = 3
    }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'somatic-cnv-pipeline'
    author          = 'Peter Campbell Clarke'
    homePage        = 'https://github.com/fourpartswater/somatic-cnv-pipeline'
    description     = 'Comprehensive somatic CNV analysis pipeline for multi-platform NGS data'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '1.0.0'
    doi             = ''
}

// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min(obj, params.max_cpus as int)
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
